# Stages defined:
#  - build: build the application
#  - test: test the application
#  - copy: move te application on remote servers
#
# We build before test, so if the test fails, we can still download the 
# binary so we can investigate it.

stages:
  - build
  - test
  - copy

# Compile the project for arm sistems
compile arm:
  stage: build
  image: golang:alpine
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o $CI_PROJECT_DIR/hello main.go
  artifacts:
    paths:
      - hello

# Compile the project for amd sistems
compile amd:
  stage: build
  image: golang:alpine
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $CI_PROJECT_DIR/hello main.go
  artifacts:
    paths:
      - hello

# Test the application
test with cover:
  stage: test
  image: golang:alpine
  script:
    - go test

# Copy the artifacts made in "compile amd" jobs to a "DEV" remote server
# Define these secrets variables in Gitlab:
#  - SSH_PRIVATE_KEY
#  - REMOTE_SERVER
# The job will be executed each time a "develop" branch push happens
#
rsync dev:
  stage: copy
  image: debian:9.3
  dependencies:
    - compile amd
  environment:
    name: DEV
    url: http://206.189.51.137:8080/
  only:
    - develop
  before_script:
    - apt-get update -y && apt-get install openssh-client make rsync -y
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tRequestTTY Yes\n\n" > ~/.ssh/config
  script:
    # remove the echo for test!
    - echo "rsync hello $REMOTE_SERVER:~/STAGE"


# Copy the artifacts made in "compile amd" jobs to a "PROD" remote server
# Define these secrets variables in Gitlab:
#  - SSH_PRIVATE_KEY_PROD
#  - REMOTE_SERVER_PROD
#
# The job is manual, and will work only if you are pushing on "master" branch
#
rsync prod:
  stage: copy
  image: debian:9.3
  dependencies:
    - compile amd
  environment:
    name: PROD
    url: http://206.189.51.137/
  only:
    - master
  when: manual
  before_script:
    - apt-get update -y && apt-get install openssh-client make rsync -y
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tRequestTTY Yes\n\n" > ~/.ssh/config
  script:
    # remove the echo for test!
    - echo "rsync hello $REMOTE_SERVER_PROD:~/PROD"
