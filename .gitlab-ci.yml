stages:
  - test
  - build
  - copy


variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab-test.pnlug.it/Eithel/pnlug-workshop


before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME


test_with_cover:
  stage: test
  image: golang:alpine
  script:
    - go test -coverprofile=cover.out
    - go tool cover -html=cover.out -o cover.html
  artifacts:
    paths:
      - cover.html

compile_arm:
  stage: build
  image: golang:alpine
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o $CI_PROJECT_DIR/hello main.go
  artifacts:
    paths:
      - hello
    
compile_amd:
  stage: build
  image: golang:alpine
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $CI_PROJECT_DIR/hello main.go
  artifacts:
    paths:
      - hello

rsync_dev:
  stage: copy
  image: debian:9.3
  dependencies:
    - compile_amd
  environment:
    name: dev
    url: http://localhost/
  only:
    - develop
  before_script:
    - apt-get update -y && apt-get install openssh-client make rsync -y
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tRequestTTY Yes\n\n" > ~/.ssh/config
  script:
    - printf "make rsync"

rsync_prod:
  stage: copy
  image: debian:9.3
  dependencies:
    - compile_amd
  environment:
    name: prod
    url: http://localhost/
  only:
    - master
  when: manual
  before_script:
    - apt-get update -y && apt-get install openssh-client make rsync -y
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tRequestTTY Yes\n\n" > ~/.ssh/config
  script:
    - printf "make rsync"
